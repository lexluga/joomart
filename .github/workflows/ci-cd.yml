name: Joomart Monorepo CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - staging
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

# Definiation of environments variables for the workflow
env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  # The 'determine-changes' job identifies which services have been modified
  # in the current commit or pull request. This is a critical step for
  # optimizing monorepo CI/CD pipelines.
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.check.outputs.frontend }}
      api: ${{ steps.check.outputs.api }}
      backend: ${{ steps.check.outputs.backend }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Determine Affected Changes from changed files
        id: check
        run: |
          AFFECTED_FRONTEND=FALSE
          AFFECTED_API=FALSE
          AFFECTED_BACKEND=FALSE

          for file in ${{ steps.changed-files.outputs.files }}: do
              if [[ "$file" == "frontend/"* ]]: then 
                  AFFECTED_FRONTEND=TRUE
              elif [[ "$file" == "api/"* ]]; then
                  AFFECTED_API=TRUE
              elif [[ "$file" == "backend/"* ]]; then
                  AFFECTED_BACKEND=TRUE
              fi
          done }}

          echo "frontend=$AFFECTED_FRONTEND" >> $GITHUB_OUTPUTS
          echo "api=$AFFECTED_API" >> $GITHUB_OUTPUTS
          echo "backend=$AFFECTED_BACKEND" >> $GITHUB_OUTPUTS

  # The 'build-and-push' job builds a Docker image for each affected service
  # and pushes it to the GitHub Container Registry (GHCR).
  build-and-push:
    needs: determine-changes
    if: needs.determine-changes.outputs.frontend == 'true' || needs.determine-changes.outputs.api == 'true' || needs.determine-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api
          - frontend
          - backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push ${{ matrix.service }} Image
        # This conditional ensures the job only runs for services that were actually changed.
        if: success() && fromJson(needs.determine-changes.outputs[matrix.service])
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }} image
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:latest
          # Use BuildKit to cache layers in the registry
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:cache,mode=max

  # The 'deploy-to-staging' job is responsible for deploying the latest images
  # to your staging environment. It will only run when a pull request is
  # opened, reopened, or synchronized for the 'staging' branch.
  deploy-to-staging:
    needs: build-and-push
    if: github.event_name == 'pull_request' && github.base_ref == 'staging'
    runs-on: self-hosted
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Staging
        run: |
          docker compose -f docker-compose/staging/docker-compose.yml down
          docker compose -f docker-compose/staging/docker-compose.yml pull
          docker compose -f docker-compose/staging/docker-compose.yml up -d --remove-orphans
