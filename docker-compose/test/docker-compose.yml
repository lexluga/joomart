services:
  # Caddy WebServer Service
  caddy:
    # It is good practice to specify a version to avoid unexpected breaking changes in the latest tag
    image: caddy:2-alpine
    container_name: joomart-caddy-test
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Use a dedicated Caddyfile for the test environment.
      - ../../config/caddy/test/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data_test:/data
      # Mount a volume for logs to persist them across container restarts
      - caddy_logs:/var/log/caddy
      # We still need to mount the frontend files for Caddy's `file_server` to access.
      # This assumes the Dockerfile.frontend.prod builds a 'dist' directory.
      # - ../../frontend/dist:/var/www/html # For production-like tests, we do not mount local volumes
      - ../../api/public:/var/www/html/public
    networks:
      - joomart-test-network
    depends_on:
      api:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy

  # Laravel API Service
  api:
    build:
      context: ../../
      dockerfile: dockerfiles/Dockerfile.api.prod
    image: joomart-api:staging-test
    container_name: joomart-api-test
    # No local volumes for production-like tests, the image is self-contained.
    working_dir: /var/www/html
    # You must define environment variables for local testing, as GITHUB_WORKSPACE won't exist.
    env_file:
      - ../../api/.env.staging
    environment:
      REDIS_HOST: redis
      SERVICE_NAME: joomart-api:staging
      SERVICE_TAGS: staging
      # For local testing, you can either create a local .env file
      # or pass variables directly as shown below
      DB_HOST: db
      DB_DATABASE: joomart_staging
      DB_USERNAME: root
      DB_PASSWORD: secret
    restart: unless-stopped
    tty: true
    expose:
      - "9000"
    depends_on:
      - db
      - redis
    networks:
      - joomart-test-network
    healthcheck:
      test: ["CMD-SHELL", "php artisan route:list > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # # Vue Frontend Service
  frontend:
    build:
      context: ../../
      dockerfile: dockerfiles/Dockerfile.frontend.prod
    image: joomart-frontend:staging-test
    container_name: joomart-vue-app-test
    restart: unless-stopped
    # No volumes for production-like tests
    working_dir: /var/www/html
    environment:
      # These URLs should match your local Caddy configuration for testing
      VUE_APP_FRONTEND_URL: http://staging.joomart.local
      VUE_APP_API_URL: http://api.staging.joomart.local
      NODE_ENV: production
      SERVICE_NAME: joomart-frontend:staging
      SERVICE_TAGS: staging
    expose:
      - "5173"
    networks:
      - joomart-test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://frontend:5173 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # NextJS Backend Service
  backend:
    build:
      context: ../../
      dockerfile: dockerfiles/Dockerfile.backend.prod
    image: joomart-backend:staging-test
    container_name: joomart-nextjs-app-test
    restart: unless-stopped
    # No volumes for production-like tests
    working_dir: /app
    environment:
      # These URLs should match your local Caddy configuration for testing
      NEXT_PUBLIC_API_URL: http://admin.staging.joomart.local
      NEXT_PUBLIC_FRONTEND_URL: http://admin.staging.joomart.local
      NODE_ENV: production
      SERVICE_NAME: joomart-backend:staging
      SERVICE_TAGS: staging
    tty: true
    expose:
      - "3000"
    networks:
      - joomart-test-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Database Service
  db:
    image: mysql:8.0 # Use a specific version to ensure consistency
    container_name: joomart-db-test
    restart: unless-stopped
    expose:
      - "3306"
    volumes:
      - ../../config/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - joomart_mysql_data_test:/var/lib/mysql
    env_file:
      - ../../config/mysql/.env.staging.db
    networks:
      - joomart-test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache Service
  redis:
    image: redis:alpine
    container_name: joomart-redis-cache-test
    expose:
      - "6379"
    networks:
      - joomart-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  joomart_mysql_data_test:
  caddy_data_test:
  caddy_logs:

networks:
  joomart-test-network:
    driver: bridge
