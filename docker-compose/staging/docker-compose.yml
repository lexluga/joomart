services:
  #Caddy WebServer Service
  caddy:
    # Use the official Caddy image. We'll use the 'latest' tag for simplicity.
    image: caddy:latest
    container_name: joomart-caddy
    restart: unless-stopped
    ports:
      # Expose both HTTP and HTTPS ports so Caddy can handle all traffic
      # and perform automatic HTTPS certificate issuance.
      - "80:80"
      - "443:443"
    volumes:
      # Mount the Caddyfile we just created. The `:ro` (read-only) flag is a good
      # security practice since Caddy doesn't need to write to the config file.
      - ../../config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      # This volume is CRUCIAL. It persists the SSL certificates and other Caddy data.
      # Without it, Caddy would re-issue certificates on every restart, which could
      # cause you to hit Let's Encrypt rate limits.
      - caddy_data:/data
      # We still need to mount the frontend files for Caddy's `file_server` to access.
      - ../../frontend/dist:/var/www/html
    depends_on:
      # It's good to ensure the Caddy container starts only after the application
      # services are ready to receive requests.
      api:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - joomart-network

  #Laravel API Service
  api:
    # Use the 'build' directive to tell Docker Compose to use your local Dockerfile
    image: ghcr.io/lexluga/joomart-api:latest
    container_name: joomart-api
    working_dir: /var/www/html
    volumes:
      - ../../api/.env:/var/www/html/.env
    environment:
      REDIS_HOST: redis
      SERVICE_NAME: joomart-api
      SERVICE_TAGS: staging
    restart: unless-stopped
    tty: true
    expose:
      - "9000"
    depends_on:
      - db
      - redis
    networks:
      - joomart-network
    # Add a health check to ensure the service is ready before Nginx routes traffic.
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  #Vue Frontend Service
  frontend:
    image: ghcr.io/lexluga/joomart-frontend:latest
    container_name: joomart-vue-app
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ../../frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      VUE_APP_FRONTEND_URL: http://staging.joomart.xyz
      VUE_APP_API_URL: https://api.staging.joomart.xyz
      NODE_ENV: staging
      CHOKIDAR_USEPOLLING: true
      tty: true
      SERVICE_NAME: frontend
      SERVICE_TAGS: staging
    expose:
      - "3000"
    networks:
      - joomart-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  #NextJS Backend Service
  backend:
    image: ghcr.io/lexluga/joomart-backend:latest
    container_name: joomart-nextjs-app
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ../../backend:/app
      - backend_node_modules:/app/node_modules
    environment:
      NEXT_PUBLIC_API_URL: https://admin.staging.joomart.xyz
      NEXT_PUBLIC_FRONTEND_URL:
        https://staging.joomart.xyz
        # Ensure your Next.js dev server expects the protocol as HTTPS if it's strictly enforced by Nginx
      NODE_ENV: production
      SERVICE_NAME: backend
      SERVICE_TAGS: staging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    tty: true

    expose:
      - "5000"
    networks:
      - joomart-network

  #Database Service
  db:
    image: mysql:latest
    container_name: joomart-db
    restart: unless-stopped
    expose:
      - "3306"
    volumes:
      - ../../config/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro # Read-only mount for MySQL config
      - joomart_mysql_data:/var/lib/mysql
    env_file:
      - ../../config/mysql/.env.db
    environment:
      SERVICE_NAME: mysql
      SERVICE_TAGS: staging
    networks:
      - joomart-network

  #Redis Cache Service
  redis:
    image: redis:alpine
    container_name: joomart-redis-cache
    expose:
      - "6379"
    networks:
      - joomart-network

volumes:
  joomart_mysql_data:
  frontend_node_modules:
  backend_node_modules:
  caddy_data:
  # This volume is used to persist the Caddy data, including SSL certificates.

networks:
  joomart-network:
    driver: bridge
