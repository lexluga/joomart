services:
  #Caddy WebServer Service
  caddy:
    # It is good practice to specify a version to avoid unexpected breaking changes in the latest tag
    image: caddy:2-alpine
    container_name: joomart-caddy-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Use a dedicated Caddyfile for the test environment.
      - ../../config/caddy/staging/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      # Mount a volume for logs to persist them across container restarts
      - caddy_logs:/var/log/caddy
      # We still need to mount the frontend files for Caddy's `file_server` to access.
      # This assumes the Dockerfile.frontend.prod builds a 'dist' directory.
      # - ../../frontend/dist:/var/www/html
      - ../../api/public:/var/www/html/public:ro
    depends_on:
      - api
        # condition: service_healthy
      - backend
        # condition: service_healthy
      # The frontend service is a build step here and doesn't need to be waited on
      - frontend
        # condition: service_healthy
    networks:
      - joomart-network

  #Laravel API Service
  api:
    # Use the 'build' directive to tell Docker Compose to use your local Dockerfile
    image: ghcr.io/lexluga/joomart-api:staging
    container_name: joomart-api-staging
    working_dir: /var/www/html
    env_file:
      - ../../api/.env.staging
    environment:
      REDIS_HOST: redis
      SERVICE_NAME: joomart-api-staging
      SERVICE_TAGS: staging
    restart: unless-stopped
    tty: true
    expose:
      - "9000"
    depends_on:
      - db
      - redis
    networks:
      - joomart-network
    # Add a health check to ensure the service is ready before Nginx routes traffic.
    healthcheck:
      test: ["CMD-SHELL", "php artisan route:list > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  #Vue Frontend Service
  frontend:
    image: ghcr.io/lexluga/joomart-frontend:staging
    container_name: joomart-vue-app:staging
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      VUE_APP_FRONTEND_URL: http://staging.joomart.xyz
      VUE_APP_API_URL: https://api.staging.joomart.xyz
      NODE_ENV: staging
      tty: true
      SERVICE_NAME: joomart-frontend:staging
      SERVICE_TAGS: staging
    expose:
      - "5173"
    networks:
      - joomart-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://frontend:5173 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  #NextJS Backend Service
  backend:
    image: ghcr.io/lexluga/joomart-backend:staging
    container_name: joomart-nextjs-app:staging
    restart: unless-stopped
    working_dir: /app
    environment:
      NEXT_PUBLIC_API_URL: https://api.staging.joomart.xyz
      NEXT_PUBLIC_FRONTEND_URL:
        https://admin.staging.joomart.xyz
        # Ensure your Next.js dev server expects the protocol as HTTPS if it's strictly enforced by Nginx
      NODE_ENV: production
      SERVICE_NAME: joomart-backend:staging
      SERVICE_TAGS: staging
    tty: true
    expose:
      - "3000"
    networks:
      - joomart-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  #Database Service
  db:
    image: mysql:8.0
    container_name: joomart-db:staging
    restart: unless-stopped
    expose:
      - "3306"
    volumes:
      - ../../config/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro # Read-only mount for MySQL config
      - joomart_mysql_data:/var/lib/mysql
    env_file:
      - ../../config/mysql/.env.staging.db
    environment:
      SERVICE_NAME: joomart-db
      SERVICE_TAGS: staging
    networks:
      - joomart-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  #Redis Cache Service
  redis:
    image: redis:alpine
    container_name: joomart-redis-cache:staging
    expose:
      - "6379"
    networks:
      - joomart-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  joomart_mysql_data:
  caddy_data:
  caddy_logs:
  # This volume is used to persist the Caddy data, including SSL certificates.

networks:
  joomart-network:
    driver: bridge
