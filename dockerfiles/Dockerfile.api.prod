# File: dockerfiles/Dockerfile.api.prod

############################################################
# Stage 1: Builder
# This stage installs all dependencies, including dev dependencies,
# and builds the application. It uses a larger base image.
############################################################
FROM php:8.3-fpm-alpine AS builder

# Set the working directory inside the container
WORKDIR /var/www/html

# Copy the rest of the application source code
COPY api/. /var/www/html/

# Create a non-root user and group for security
ARG user=lex
ARG uid=1000
RUN adduser -D -u ${uid} ${user}

# Install system dependencies needed for Laravel and PHP extensions
RUN apk add --no-cache \
    git \
    curl \
    supervisor \
    zip \
    unzip 

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_mysql    

# Copy composer binary from official image
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Install ALL composer dependencies.
RUN composer install --optimize-autoloader --no-scripts --no-plugins --no-dev

# Set permissions for the non-root user
RUN php artisan key:generate

# Switch to the non-root user
USER ${user}

############################################################
# Stage 2: Final
# This stage copies only the necessary production artifacts
# to a lean, final image for deployment.
############################################################
FROM php:8.3-fpm-alpine AS production

# Create the same non-root user from the builder stage
ARG user=lex
ARG uid=1000
RUN adduser -D -u ${uid} ${user}

# Install supervisor and make it executable.
RUN apk add --no-cache supervisor

# Copy the necessary files from the builder stage, including vendor
COPY --from=builder --chown=${user}:${user} /var/www/html /var/www/html

# Copy the supervisor configuration and the start script.
COPY dockerfiles/supervisord.conf /etc/supervisord.conf
COPY dockerfiles/api.start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# Set the working directory and user for the final container
WORKDIR /var/www/html

USER ${user}

# Expose the port for the PHP-FPM service
EXPOSE 9000

# The CMD now executes the start.sh script
CMD ["/usr/local/bin/start.sh"]