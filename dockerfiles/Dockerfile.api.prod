# ============================================
# Stage 1: The Build Stage
# This stage installs Composer dependencies and compiles the application.
# It includes all the development tools we won't need in the final image.
# ============================================
FROM php:8.3-fpm-alpine AS builder

# Set the working directory for the application
WORKDIR /var/www/html

# Create a non-root user and group for security
# The 'adduser' command in Alpine automatically creates a group with the same name.
ARG user=lex
ARG uid=1000
RUN adduser -D -u ${uid} ${user}

# Install system dependencies necessary for the build process.
RUN apt-get update && apt-get install -y \
    git \
    curl \
    zip \
    unzip

# Install necessary PHP extensions for the build stage.
# We can use docker-php-ext-configure for some extensions.
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd \
    && docker-php-ext-install pdo pdo_mysql mbstring exif pcntl bcmath zip

# Copy the composer binary from the composer image.
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy the entire application source code
COPY ./api/ /var/www/html/

# Copy your composer.json and composer.lock to leverage Docker's layer caching.
# This prevents re-installing dependencies on every code change.
COPY api/composer.json api/composer.lock ./

# Switch to the non-root user
USER ${user}

# Install Composer dependencies, skipping development packages (--no-dev).
# This is a crucial step for a production-ready image.
RUN composer install --no-dev --optimize-autoloader

# Run Laravel-specific commands to optimize for production.
RUN php artisan storage:link \
    && php artisan optimize:clear \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

############################################################
# Stage 2: Final
# This stage copies only the necessary production artifacts
# to a lean, final image for deployment.
############################################################
FROM php:8.3-fpm-alpine AS production

# Create the same non-root user from the builder stage
ARG user=lex
ARG uid=1000
RUN adduser -D -u ${uid} ${user}

# Copy only the necessary files from the builder stage
COPY --from=builder --chown=${user}:${user} /var/www/html /var/www/html

# Set the working directory and user for the final container
WORKDIR /var/www/html
USER ${user}

# Expose the port for the PHP-FPM service
EXPOSE 9000

# Start the PHP-FPM server
CMD ["php-fpm"]

