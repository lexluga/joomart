# ============================================
# Stage 1: The Build Stage
# This stage is for compiling the Vue.js application.
# It will have all the necessary Node.js tools and dependencies.
# ============================================
FROM node:alpine AS build-stage

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker's layer caching.
# This ensures that 'npm install' is not re-run on every code change.
COPY frontend/package*.json /app/

# Install project dependencies
RUN npm install

# Copy all the application source code
COPY frontend/. /app/

# Build the Vue.js application for production
# This command creates the 'dist' folder with static HTML, CSS, and JS files.
RUN npm run build

# ============================================
# Stage 2: The Production Stage
# This stage is for serving the built application.
# It is very lean and only contains Nginx and the static files.
# ============================================
FROM nginx:alpine AS production-stage

# Copy the custom Nginx configuration file from your local directory
# to the Nginx container's configuration path.
COPY config/nginx/staging/staging.joomart.xyz.conf /etc/nginx/conf.d/default.conf

# Copy the built files from the 'build-stage' into the Nginx server's
# default public directory. This is the crucial step of the multi-stage build.
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Expose port 80 for standard HTTP traffic
EXPOSE 80

# The CMD command runs Nginx in the foreground,
# which is required for the Docker container to stay running.
CMD ["nginx", "-g", "daemon off;"]